pipeline {
  agent any
  stages {

        stage('dostuff') {
          steps {
            withSonarQubeEnv(credentialsId: 'c9d3cafaced0a6afc8bb4d687753058265ba3ec4', installationName: 'blackjacksonar') {
              echo 'Hello1'
              echo 'Hello2'
              echo 'Hello3'

            }

          }
        }
        stage('Build') {
          when {
            branch 'main'
          }
          steps {
            withMaven() {
              sh 'mvn -f api1Reimb/pom.xml clean install'
              sh 'mvn -f api1Reimb/pom.xml clean package -DskipTests'
            }

          }
        }

        stage('Example Build') {
          steps {
            echo 'Hello, Maven'
            sh 'mvn --version'
          }
        }

        stage('Checkout') {
          steps {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'ghp', url: 'https://github.com/jschuwan/github']]])
          }
        }

        stage('Quality Gate1') {
          steps {
            withSonarQubeEnv(credentialsId: 'c9d3cafaced0a6afc8bb4d687753058265ba3ec4', installationName: 'blackjacksonar') {
              withMaven() {
                  dir('backup/Reverse-Angular/') {
                    sh 'mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=spring_projects_1 \
                        -Dsonar.host.url=http://35.226.13.43:9000 \
                        -Dsonar.login=c9d3cafaced0a6afc8bb4d687753058265ba3ec4'
                  }
              }

            }

          }
        }


    }
}



////////

  stages {
    stage('Test') {
      steps {
        sh 'mvn -f pom.xml test'
      }
    }

  stage('Build') {
            steps {
              withMaven {
                sh 'mvn -f pom.xml clean install'
                sh 'mvn -f pom.xml clean package -DskipTests'
              }
            }
   }

   stage('Docker Build') {
     steps {
       container('docker') {  
          script {
            sh "docker build -t javasre2022/discovery ."
          }
        }
     }
   }

   stage('Docker Deliver') {
        steps {
          container('docker') {
            script {
              sh "docker login -u javasre2022 -p 01-18-2022"
              sh "docker push javasre2022/discovery"
            }
          }
        }
    }

//      stage('Deploy to GKE') {
//        agent {
//                         kubernetes {
//                            label 'discovery'
//                            idleMinutes 20
//                            yamlFile 'deployment.yml'
//                          }
//                 }
//              steps{
//                echo 'deploy'
//              }
//      }

//                  sh 'sed -i "s/%TAG%/$BUILD_NUMBER/g" ./k8s/deployment.yml'
//                  sh 'cat ./k8s/deployment.yml'
//                  sh 'kubectl get pod'
//                  step([$class: 'KubernetesEngineBuilder',
//                       projectId: 'reverse-devops-sre',
//                       clusterName: 'Reverse-DevOps-SRE',
//                       zone: 'us-central1',
//                       manifestPattern: 'k8s/',
//                       credentialsId: '2e157ef7-d3ec-43e8-8d17-e46b0da383d3',
//                       verifyDeployments: true
//                  ])
//
//                  cleanWs()
//
//                  discordSend description: "Build #$currentBuild.number",
//                       link: BUILD_URL, result: currentBuild.currentResult,
//                       title: JOB_NAME,
//                       webhookURL: "https://discord.com/api/webhooks/946097550514061343/7IRGxvAsw24cbGPIHXE15gtxCvzQQtRl3e5DEcm7arQpC6x3cVJPXXWZo7UWHKyJumuW"
//               }
//       }
  }
}
}
